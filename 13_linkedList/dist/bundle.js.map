{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;;;;AAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACb8B;;AAEvB;AACP;AACA,oBAAoB,uCAAI;AACxB;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;;AAEA;AACA,wBAAwB,uCAAI;;AAE5B;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,uCAAI;AAC5B;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,uCAAI;AAC5B;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iCAAiC,OAAO;;AAExC;AACA;AACA;;;;;;;UCnHA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACN6C;;AAE7C,iBAAiB,sDAAU;;AAE3B;AACA,2BAA2B,aAAa;AACxC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,2BAA2B;AAC3B;AACA","sources":["webpack://13_linkedlist/./src/Node.js","webpack://13_linkedlist/./src/linkedList.js","webpack://13_linkedlist/webpack/bootstrap","webpack://13_linkedlist/webpack/runtime/define property getters","webpack://13_linkedlist/webpack/runtime/hasOwnProperty shorthand","webpack://13_linkedlist/webpack/runtime/make namespace object","webpack://13_linkedlist/./src/main.js"],"sourcesContent":["export class Node {\n  constructor(value = null, nextNode = null) {\n    this.value = value;\n    this.nextNode = nextNode;\n  }\n\n  updateValue(newValue) {\n    this.value = newValue;\n  }\n\n  updateNextNode(nextNode) {\n    this.nextNode = nextNode;\n  }\n}\n","import { Node } from \"./Node\";\n\nexport class LinkedList {\n  constructor() {\n    this.head = new Node();\n  }\n\n  head() {\n    return this.head;\n  }\n\n  tail(node = this.head) {\n    if (node.nextNode === null) {\n      return node; //tail\n    }\n    return this.tail(node.nextNode);\n  }\n\n  append(value) {\n    const newNode = new Node(value, null);\n\n    if (this.head === null) {\n      this.headupdateNextNode(newNode);\n    }\n    this.tail().updateNextNode(newNode);\n  }\n\n  prepend(value) {\n    const newNode = new Node(value, this.head.nextNode);\n    this.head.updateNextNode(newNode);\n  }\n\n  size() {\n    let size = 0;\n    let current = this.head.nextNode;\n\n    while (current) {\n      size++;\n      current = current.nextNode;\n    }\n\n    return size;\n  }\n\n  at(index) {\n    let i = 0;\n    let current = this.head.nextNode;\n    while (current !== null) {\n      if (i === index) {\n        return current;\n      }\n      current = current.nextNode;\n      i++;\n    }\n  }\n\n  pop() {\n    const size = this.size();\n    const tail = this.tail();\n    const newTail = this.at(size - 2); //0 index - 1\n    newTail.updateNextNode(null);\n    return tail;\n  }\n\n  contains(value) {\n    let current = this.head.nextNode;\n    while (current) {\n      if (current.value === value) {\n        return true;\n      }\n      current = current.nextNode;\n    }\n    return false;\n  }\n\n  find(value) {\n    let current = this.head.nextNode;\n    let index = 0;\n    while (current) {\n      if (current.value === value) {\n        return index;\n      }\n      current = current.nextNode;\n      index++;\n    }\n    return null;\n  }\n\n  insertAt(value, index) {\n    const nodeLeft = this.at(index - 1);\n    const nodeRight = this.at(index);\n    const newNode = new Node(value, nodeRight);\n    nodeLeft.updateNextNode(newNode);\n  }\n\n  removeAt(index) {\n    const nodeLeft = this.at(index - 1);\n    const nodeRight = this.at(index + 1);\n    nodeLeft.updateNextNode(nodeRight);\n  }\n\n  toString() {\n    let values = [];\n    let current = this.head.nextNode;\n\n    while (current) {\n      values.push(current.value);\n      current = current.nextNode;\n    }\n\n    const string =\n      values.map((value) => `( ${value} )`).join(\" -> \") + \" -> null\";\n\n    console.log(string);\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { LinkedList } from \"./linkedList.js\";\n\nconst list = new LinkedList();\n\n// Tests\nconsole.log(\"\\nAPPEND DOG; PREPEND CAT; APPEND PARROT:\");\nlist.append(\"dog\");\nlist.prepend(\"cat\");\nlist.append(\"parrot\");\nlist.toString();\n\nconsole.log(\"\\nNODE AT INDEX 1\");\nconsole.log(list.at(1));\n\nconsole.log(\"\\nTAIL NODE\");\nconsole.log(list.tail());\n\nconsole.log(\"\\nREMOVE NODE AT INDEX 1\");\nlist.removeAt(1);\nlist.toString();\n\nconsole.log(\"\\nINSERT HAMSTER AT INDEX 2\");\nlist.insertAt(\"hamster\", 2);\nlist.toString();\n\nconsole.log(\"\\nPOP LAST NODE OFF THE LIST\");\nconsole.log(list.pop());\nlist.toString();\n\nconsole.log(\"\\nFIND SNAKE; FIND PARROT\");\nconsole.log(list.find(\"snake\"));\nconsole.log(list.find(\"parrot\"));\n"],"names":[],"sourceRoot":""}